//----------------------------------------------------------------------------------------------------
// game_start
//----------------------------------------------------------------------------------------------------
function game_start() 
{
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute
//----------------------------------------------------------------------------------------------------
function repeatedly_execute() 
{
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute_always
//----------------------------------------------------------------------------------------------------
function repeatedly_execute_always() 
{
}

//----------------------------------------------------------------------------------------------------
// on_key_press
//----------------------------------------------------------------------------------------------------
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0;
  
  // "System Keys"
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  
  // Debugger Keys
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
	// all mouse clicks are handled in TwoClickHandler.asc!
}

//----------------------------------------------------------------------------------------------------
// on_event
//----------------------------------------------------------------------------------------------------
function on_event (EventType event, int data) 
{
}

//----------------------------------------------------------------------------------------------------
// unhandled_event
//----------------------------------------------------------------------------------------------------
function unhandled_event (int what, int type) 
{
	if (what == 1) // Unhandled events for HOTSPOTS
	{
		if (type == 1) // look
		{
			player.Say("Was soll da sein?");
		}
		if (type == 2) // interact
		{
			player.Say("Hier kann ich nichts machen.");
		}
		if (type == 3) // use inv on
		{
			player.Say("Das bringt so doch nichts.");
		}
	}
	if (what == 2) // Unhandled events for OBJECTS
	{
		if (type == 0) // look
		{
			player.Say("Sieht gut aus.");
		}
		if (type == 1) // interact
		{
			player.Say("Das will ich nun wirklich nicht in die Hand nehmen");
		}
		if (type == 3) // use inv on
		{
			player.Say("Die Idee ist gut, aber es funktioniert leider nicht.");
		}
	}
	if (what == 3) // Unhandled events for CHARACTERS
	{
		if (type == 0) // look
		{
			player.Say("Hm.");
		}
		if (type == 1) // interact
		{
			player.Say("Da gibt es nichts zu sagen");
		}
		if (type == 3) // use inv on
		{
			player.Say("Ich möchte das lieber noch etwas behalten. ");
		}
	}
	if (what == 5) // Unhandled events for INVENTORY ITEMS
	{
		if (type == 0) // look
		{
			player.Say("Ich trag das einfach nur zum Spaß mit mir rum.");
		}
		if (type == 1) // interact
		{
			player.Say("Lieber Nicht");
		}
		if (type == 3) // use inv on
		{
			player.Say("Das bringt nix!");
		}
	}
}

//----------------------------------------------------------------------------------------------------
// dialog_request
//----------------------------------------------------------------------------------------------------
function dialog_request(int param) 
{
}

//----------------------------------------------------------------------------------------------------
// gInventoryBar
//----------------------------------------------------------------------------------------------------
function btnInvScrollLeft_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollDown();
}

function btnInvScrollRight_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollUp();
}

function btnMenue_OnClick(GUIControl *control, MouseButton button)
{
  gMainMenue.Visible=true;	
}



// TEST INVENTORY ITEMS

// The "beef jerky" inventory item
function iBeefJerky_Look()
{
	player.Say("Just jerky enough.");
}

// The "blue cup" inventory item
function iBlueCup_Look()
{
	player.Say("You sure see them a lot these days!");
}

function iBlueCup_UseInv()
{
	player.Say("It's for holding coffee, or tea, or MAYBE cocoa. Nothing else.");
}


// The "book" inventory item

// The "pan pipes" inventory item: This one is an example of an item that is used directly
function iPipes_Look()
{
	player.Say("I just started to learn how to play them.");
}

function iPipes_Interact()
{
	player.Say("Pfeeeeeeeehhhhppppphrrrrrfff...");
}


//Menü

function gInventoryBar_OnClick(GUI *theGui, MouseButton button)
{

}

function TextBox1_OnActivate(GUIControl *control)
{

}

function bQuit_OnClick(GUIControl *control, MouseButton button)
{
QuitGame(1);
}

function bResumeToGame_OnClick(GUIControl *control, MouseButton button)
{
  gMainMenue.Visible=false;
}

function bSave_OnClick(GUIControl *control, MouseButton button)
{
  SaveGameDialog();
}

function bLoad_OnClick(GUIControl *control, MouseButton button)
{
  RestoreGameDialog();
}

function bNewGame_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}




function gGui1_OnClick(GUI *theGui, MouseButton button)
{

}

//Map

function iCitymap_Look()
{
  player.Say("Dies ist der Stadtplan von Darmstadt");
}


function gCitymapSmal_OnClick(GUI *theGui, MouseButton button)
{
  if (player.InventoryQuantity[iBookJugendstil.ID] == 1)
  {
  gCitymap.Visible = true;
  gCitymapSmal.Visible = false;
  }
  else
  {
    player.Say("Bevor ich das Büro verlassen kann, brauche ich noch das Buch das Barbara B. in ihrer Nachricht erwähnt hat!");
  }
}


function bTowmhall_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom (1);
  gCitymap.Visible = false;
  gCitymapSmal.Visible = true;
}

function bRosenhoehe_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom (6);
  gCitymap.Visible = false;
  gCitymapSmal.Visible = true;
}

function bJLH_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom (7);
  gCitymap.Visible = false;
  gCitymapSmal.Visible = true;
}

function bMathildenhoehe_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom (8);
  gCitymap.Visible = false;
  gCitymapSmal.Visible = true;
 }
 
function bCloseCitymap_OnClick(GUIControl *control, MouseButton button)
{
  gCitymap.Visible = false;
  gCitymapSmal.Visible = true;
}



//Inventory look

function iCardArtist_Look()
{
  player.Say("Dies ist die Visitenkarte eines Künstlers aus Darmstadt");
}

function iFlyerStonesearch_Look()
{
  player.Say("Dies ist der Flyer für die Steinejagd. Moment mal, auf der Rückseite befindet sich ein Post-it mit einer Liste:");
  player.Say("Start Löwentor");
  player.Say("1. Ernst Ludwig Haus");
  player.Say("2. Schwanentempel");
  player.Say("3. Russische Kapelle");
  player.Say("4. Lilienbrunnen");
  player.Say("5. Treppe Ausstellungsgebäude");
  player.Say("6. Hochzeitsturm");
  player.Say("7. Plantanenhain");
  
}

function iKeyTownHall_Look()
{
  player.Say ("Dies ist der Generalschlüssel für das Rathaus.");
}

function iLetterFromBB_Look()
{
 player.Say ("Dies ist eine Nachricht von Barbara B. Sie erinnert mich daran, dass ich mich darum kümmern muss, dass der eine Löwe auf dem Löwentor dringend ersetzt werden muss. Ausserdem schreibt sie mir, dass Sie ein Buch über den Jugendstil in Darmstadt für mich in ihrem Büro hat. Auch wenn ich nicht glaube, dass ich es brauche, ich sollte es mir holen.");
}



function iStoneELH_Look()
{
  player.Say("Auf dem Stein ist ein Gebäude zu sehen mit einem runden Eingangsportal und 2 Statuen daneben");
}

function iStoneTempel_Look()
{
  player.Say("Auf dem Stein ist eine Art Pavillon abgebildet");
}

function iStoneKapelle_Look()
{
  player.Say("Auf dem Stein sieht man ein Gebäude mit Türmen und goldener Kuppel.");
}

function iStoneFauntain_Look()
{
  player.Say("Auf dem Stein ist eine Art Schwimmbecken abgebildet");
}

function iStoneHalls_Look()
{
  player.Say("Das Gebäude auf diesem Stein besteht scheinbar aus vielen Würfeln und einem Dreieck ");
}

function iStoneHochzeitsturm_Look()
{
  player.Say("Der Turm auf diesem Stein hat eine ungewöhnliche Spitze.");
}

function iStoneTree_Look()
{
 player.Say("Mal was anderes. Auf diesem Stein ist ein Baum abgebildet, ich weiß leider nicht welcher.");
}

function iHandy_Look()
{
 player.Say("Das ist mein Smartphone");
}




//Talk to

function cSchellenberg_Talk()
{
  if (firstSpeakSchellenberg == true)
  {
    dSchellenbergLoeweStart.Start();
  }
  else if (waitForNewPrice == true && coastLoeweEnd == false)
  {
   dSchellenbergWaitPrice.Start();
  }
  else if(coastLoeweEnd == true)
  {
    dSchellenbergLoeweNewPrice.Start();
  }
  else if (chapterOneDone == true)
  {
    dSchellenbergChapterOneEnd.Start();
  }  
  else
  {
    player.Say("Ich sollte Andre in Ruhe arbeiten lassen.");
  } 
}

function cRestaurator_Talk()
{
  if (bool restauratorFirstCall == true)
  {
    dRestauratorStart.Start();
  }
  else if (loeweCoastTooHigh == true)
  {
    dRestauratorAskLowerPrice.Start();
  }
  else if (stoneQuestStart == true)
  {
    if (rigthStones == 7)
    {
      dRestauratorNewPrice.SetOptionState(2 , eOptionOn);
      dRestauratorNewPrice.Start();
    }
    else
    {
      dRestauratorNewPrice.Start();
    }
  }
  else
  {
    player.Say("Warum sollte ich Herrn Müller anrufen?");
  }
}
// Use inventoryiteam with other Inventory Iteam

function iHandy_UseInv()
{
 if (player.ActiveInventory == iCardArtist)
 {
   cRestaurator_Talk ();
 } 
 else
 {
   player.Say("Ich glaube nicht, dass man das anrufen kann.");
 }  
}



function bNewspaperClose_OnClick(GUIControl *control, MouseButton button)
{
  gNewspaperchapter1.Visible = false;
}

function Button1_OnClick(GUIControl *control, MouseButton button)
{
 gSteuerung.Visible = false;
}
